const fs = require('fs');
const path = require('path');
const Parser = require('./parser');

class PostmanGenerator {
  constructor(options) {

    // 读取默认配置文件
    const configPath = path.join(__dirname, '../config/node-postman-generator.json');
    const defaultConfig = fs.existsSync(configPath) ? require(configPath) : {};

    this.options = {
      routesPath: './routes',
      outputFile: './postman/collection.json',
      baseUrl: '{{base_url}}',
      ...defaultConfig,  // 先应用配置文件中的默认值
      ...options
    };
  }

  async generate() {
    console.log('🚀 开始生成 Postman 集合...');
    fs.mkdirSync(path.dirname(this.options.outputFile), { recursive: true });

    const parser = new Parser(this.options.routesPath);
    const routes = await parser.parseRoutes();
    const collection = this.buildCollection(routes);

    fs.writeFileSync(this.options.outputFile, JSON.stringify(collection, null, 2));
    console.log(`✅ 生成完成: ${this.options.outputFile}`);
  }

  buildCollection(routes) {
    return {
      info: { name: "Generated API Collection", schema: "https://schema.getpostman.com/json/collection/v2.1.0/collection.json" },
      item: routes.map(route => ({
        name: `${route.method} ${route.path}`,
        request: {
          method: route.method,
          url: { raw: `${this.options.baseUrl}${route.path}` }
        }
      }))
    };
  }
}

module.exports = PostmanGenerator;
